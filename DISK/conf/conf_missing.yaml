################################################################################
### config file companion of main_fillmissing.py script
### to train a neural network model for the imputation task
### -> the principal parameters to change are marked with TOCHANGE
################################################################################

defaults:
  # TOCHANGE: this loads the default config for a given backbone
  # can be: gru, ae_tcn, st_gcn, sts_gcn, transformer
  # we advise gru or transformer for better performance
  - network: transformer

hydra:
  job:
    chdir: True
  run:
    # TOCHANGE: specify the output
    dir: outputs/${now:%Y-%m-%d}_Mocap_for_comparison/DISK #outputs/2023-10-26_treadmill/${now:%d-%m-%y}_GRU_new

# TOCHANGE: name of the dataset, should match the folder name in `datasets
dataset:
  name: Mocap_keypoints_60_stride30_new
  # path from datasets folder, can be left blank if not using st_gcn as network
  skeleton_file: Mocap_keypoints_60_stride30_new/skeleton.py #INH_FL2_keypoints_1_60_wresiduals_stride0.5/skeleton.py #example: INH_FL2_keypoints_1_60_wresiduals_stride0.5/skeleton.py

training: # a priori not to be changed
  epochs: 1500
  batch_size: 32
  # from experience, learning rate of 0.0001 is better for GRU and 0.001 for transformer
  learning_rate: 0.001
  seed: false
  # load can be used to continue a training
  # if a valid path is given, then the saved model will be loaded
  # instead of starting from a random initialization of the weights
  load: # example: outputs/2023-09-27_Fishv3_newnewmissing/09-26-47_STGCN_stride60
  n_cpus: 6 # TOCHANGE: if no multiprocessing, put 0
  loss:
    type: l1
    mask: true
    factor: 100
  model_scheduler:
    type: lambdalr
    steps_epoch: 500
    rate: 0.95
  print_every: 10
  # print_every modifies the frequency at which the model infers on the validation set and the frequency at which
  # models can be saved (save when validation loss is better than previous one)

  ## if mu_sigma is True, then will change the output of the model from a point prediction (one value per keypoint per timepoint)
  ## to a probabilistic output where for each keypoint and each timepoint, it will output a mean (mu) and a standard
  ## deviation (sigma). The network is trained with a different loss (a different loss profile is expected).
  ## Used in this framework to approximate the network imputation error on each sample (cf test_fillmissing.py)
  ## Used also to filter the imputations in impute_dataset (cf impute_dataset.py)
  mu_sigma: False # TOCHANGE (True or False)
  beta_mu_sigma: 0.5 # default is 0 for the standard NLL loss


feed_data:
  mask: true
  transforms:
    add_missing:
      pad: [1, 0]
      indep_keypoints: True
      files:
       # TOCHANGE:
       # first proba missing, then missing length. order matters!
       # the 3rd file specifying the number of simultaneous missing keypoints is optional
       # path from datasets folder
      - Mocap_keypoints_60_stride30_new/proba_missing_uniform_kpname.csv
      - Mocap_keypoints_60_stride30_new/proba_missing_length_uniform_kpname.csv
    viewinvariant: true
    normalize: false
    normalizecube: true
  verbose: 0
